#!/usr/bin/env ruby
require 'fileutils'

# path to your application root.
APP_ROOT = File.expand_path('..', __dir__)

def setup
  FileUtils.chdir APP_ROOT do
    # This script is a way to set up or update your development environment automatically.
    # This script is idempotent, so that you can run it at any time and get an expectable outcome.
    # Add necessary setup steps to this file.

    log '== Installing dependencies =='
    system! 'gem install bundler --conservative'
    system('bundle check') || system!('bundle install')

    # log "\n== Copying sample files =="
    # unless File.exist?("config/database.yml")
    #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
    # end

    log "\n== Preparing database =="
    # Note that the very first time this runs, db:reset
    # will fail, but this failure is fixed by
    # doing a db:migrate
    system! 'bin/rails db:reset || bin/rails db:migrate'

    log 'Dropping & recreating the test database'
    # Setting the RAILS_ENV explicitly to be sure
    # we actually reset the test database
    system! 'RAILS_ENV=test bin/rails db:reset'

    log "\n== Removing old logs and tempfiles =="
    system! 'bin/rails log:clear tmp:clear'

    log 'All set up.'
    log ''
    log 'To see commonly-needed commands, run:'
    log ''
    log '    bin/setup help'
    log ''

    log "\n== Restarting application server =="
    system! 'bin/rails restart'
  end
end

def help
  log 'Useful commands:'
  log ''
  log '  bin/run'
  log '     # run app locally'
  log ''
  log '  LOGRAGE_IN_DEVELOPMENT=true bin/run'
  log '     # run app locally using'
  log '     # production-like logging'
  log ''
  log ''
  log '  bin/ci'
  log '     # runs all tests and checks as CI would'
  log ''
  log '  bin/rails test'
  log '     # run non-system tests'
  log ''
  log '  bin/rails test:system'
  log '     # run system tests'
  log ''
  log '  bin/setup help'
  log '     # show this help'
  log ''
end

# start of helpers

# We don't want the setup method to have to do all this error
# checking, and we also want to explicitly log what we are
# executing. Thus, we use this method instead of Kernel#system
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came from this
# script, so we'll use log instead of `puts`
def log(message)
  puts "[ bin/setup ] #{message}"
end

# end of helpers

if ARGV[0] == 'help'
  help
else
  setup
end
